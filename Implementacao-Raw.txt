#funcao que resolve o problema da soma do subconjunto super crescente
def supIncSum(seq, s):
    n = len(seq) - 1
    res = []
    while n >= 0:
        if s >= seq[n]:
            res.append(1)
            s -= seq[n]
        else:
            res.append(0)
        n -= 1
    res.reverse()
    return res

# constroi uma sequencia super crescente dado o tamanho da seq
def randomSupIncSequence(n):
    soma = 0
    first = randint(1, 2 ** (n+1))
    f = lambda x : x * randint(2, n) + randint(1, 2 ** n)
    size = 1
    res = [first]
    soma += first
    for i in range(n-1):
        first = f(first)
        res.append(first)
        soma += first
    return res, soma

#Encontra o M dado a soma total da sequencia
def findM(soma, n):
    return randint(1, n) * soma + randint(1, 2 ** n)



#Encontra um numero coprimo com o parametro (algoritmo brute force)
def findW(M):
    W = randrange(1, M)
    while gcd(M, W) != 1:
        W += 1
    return W

#Gera permutações de elementos
def sattoloShuffle(n):
    res = list(range(n))
    while n > 1:
        n -= 1
        j = randrange(n)
        res[j], res[n] = res[n], res[j]
    return res

#Geracao da chave simples
def KSKeyGen(n):
    seq, soma = randomSupIncSequence(n)
    M = findM(soma, n)
    zM = IntegerModRing(M)
    W = zM(findW(M))
    perm = sattoloShuffle(n)
    privKey = (n, perm, M, W, seq)
    pubKeylist = []
    for i in range(n):
        pubKeylist.append(ZZ(W * seq[perm[i]]))
    pubKey = (n, pubKeylist)
    print("Limite de cifracao: " + str(2 ** n - 1))
    return pubKey, privKey


def cifravel(mens, n):
    return mens <= 2 ** n - 1

#Encriptacao Simples
def KSEncrypt(mensagem, pubKey):
    n, pubKeylist = pubKey
    if cifravel(mensagem, n):
        c = 0
        for ind, i in enumerate(map(int, format(mensagem, "0" + str(n) + "b"))):
            c += i * pubKeylist[ind]
        return c
    else:
        print("A mensagem ultrapassa o limite de cifracao")
        return []

#Decriptacao Normal
def KSDecrypt(criptograma, privKey):
    n, perms, M, W, seq = privKey
    zM = IntegerModRing(M)
    wMod = zM(W)
    d = wMod ^ -1 * criptograma
    bits = supIncSum(seq, d)
    msg = 0
    for i in range(n):
        bit = bits[perms[i]]
        msg += bit * 2 ** (n-1)
        n -= 1
    return msg

#Geracao da Chave Multi Iterada
def MIKSKeyGen(n, t):
    seq, soma = randomSupIncSequence(n)
    seqj = seq
    Ms = []
    Ws = []
    for j in range(t):
        somaj = sum([ZZ(a) for a in seqj])
        Mj = findM(somaj, n)
        Ms.append(Mj)
        Wj = findW(Mj)
        Ws.append(Wj)
        zMj = IntegerModRing(Mj)
        seqj = [a * Wj for a in map(zMj, seqj)]
    perms = sattoloShuffle(n)
    pubKeylist = []
    for i in range(n):
        pubKeylist.append(seqj[perms[i]])
    pubKey = n, pubKeylist
    privKey = n, perms, Ms, Ws, seq
    print("Limite de cifracao: " + str(2 ** n - 1))
    return pubKey, privKey

#Encriptacao Multi Iterada
def MIKSEncrypt(mensagem, pubKey):
    return KSEncrypt(mensagem, pubKey)

#Decriptacao Multi Iterada
def MIKSDecrypt(cripto, privKey):
    n, perms, Ms, Ws, seq = privKey
    dj = cripto
    for Mj, Wj in zip(Ms[::-1], Ws[::-1]):
        zMj = IntegerModRing(Mj)
        Wjmod = zMj(Wj)
        djmod = zMj(dj)
        dj = Wjmod ** -1 * djmod
    bits = supIncSum(seq, dj)
    msg = 0
    for i in range(n):
        bit = bits[perms[i]]
        msg += bit * 2 ** (n-1)
        n -= 1
    return msg
